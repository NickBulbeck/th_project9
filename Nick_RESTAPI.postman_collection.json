{
	"info": {
		"_postman_id": "4d7fa84b-cd33-4387-a821-b20dd4cd5ab3",
		"name": "FSJS Techdegree: REST API Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Users (With Auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status should be 200",
							"// Response should have id, firstName, lastName, emailAddress, role, and nothing else",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.firstName).to.be.a(\"string\");",
							"  pm.expect(jsonData.lastName).to.be.a(\"string\");",
							"  pm.expect(jsonData.id).to.be.a(\"number\");",
							"  pm.expect(jsonData.emailAddress).to.equal(\"joe@smith.com\");",
							"  pm.expect(jsonData.role).to.equal(\"standard\");",
							"  pm.expect(jsonData.password).to.equal(undefined);",
							"  pm.expect(jsonData.createdAt).to.equal(undefined);",
							"  pm.expect(jsonData.updatedAt).to.equal(undefined);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// response status should be 201",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"// Should have an empty response",
							"// console.log(pm.response.code);",
							"const body = pm.response.body;",
							"pm.test(\"Test for empty response\", function () {",
							"    pm.expect(body).to.equal(undefined);",
							"});",
							"// response should have a location header set to '/'",
							"pm.test(\"Test for location header\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"    pm.response.to.be.header(\"Location\", \"/\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"emailAddress\": \"john23@smith.com\",\n  \"password\": \"johnpassword\"\n}"
				},
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User (Existing Email Address) - EXCEEDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should get a 400 response",
							"// Response should contain an error message "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Joe\",\n  \"lastName\": \"Smith\",\n  \"emailAddress\": \"joe@smith.com\",\n  \"password\": \"password\"\n}"
				},
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 200 status",
							"// Should return an array of objects",
							"// Each object should have the course properties, and the \"user\" property should be a nobject",
							"// No course should have a createdAt or updatedAt property"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a status 200",
							"// Course should contain the usual properties",
							"// Don't test any further because there's no authorisation and we dinnae ken the user"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Course (non-existent) NICK_EXTRA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a status 404",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"// Should return an error",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.message).to.be.a(\"string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses/x",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"x"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Course (Minimum Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// response status should be 201",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"// Should have an empty response",
							"const body = pm.response.body;",
							"pm.test(\"Test for empty response\", function () {",
							"    pm.expect(body).to.equal(undefined);",
							"});",
							"// response should have a location header set to '/api/courses/xxx'",
							"let location = pm.response.headers.get(\"Location\");",
							"",
							"pm.test(\"Test for location header\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"    // pm.response.to.be.header(\"Location\", \"/api/courses/\");",
							"    pm.expect(location).to.match(/^a-z$/);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"New Course\",\n    \"description\": \"My course description\",\n    \"userId\": 1\n}"
				},
				"url": {
					"raw": "localhost:5000/api/courses",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Course (Minimum Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Returns a 204",
							"// Returns nothing else"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": 1,\n    \"title\": \"New Course Updated Again Hello\",\n    \"description\": \"My course description. And again.\",\n    \"userId\": 1\n}"
				},
				"url": {
					"raw": "localhost:5000/api/courses/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Course (With Auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Returns a 204",
							"// Returns nothing else"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses/4",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Course (Not Owner) - EXCEEDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Returns a 403 (forbidden) code",
							"// Returns the error \"forbidden\""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": 3,\n    \"title\": \"New Course Updated Again Hello\",\n    \"description\": \"My course description. And again.\",\n    \"userId\": 1\n}"
				},
				"url": {
					"raw": "localhost:5000/api/courses/3",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Course (Not Owner) - EXCEEDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Returns a 403 status",
							"// Returns the error \"forbidden\""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses/3",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User (Incomplete Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a status of 400",
							"// Should return 4 errors"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Course (Incomplete Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a status of 400",
							"// Shouuld return two errors"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "localhost:5000/api/courses",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Course (Incomplete Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 400 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"// Should return two errors",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.errors).to.be.an(\"array\");",
							"});",
							"// Should return 2 error messages"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "joepassword",
							"type": "string"
						},
						{
							"key": "username",
							"value": "joe@smith.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"title\": \"\",\n    \"description\": \"\"\n}"
				},
				"url": {
					"raw": "localhost:5000/api/courses/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User (Invalid Email Address) - EXCEEDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 400 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"// Should return a single error",
							"const jsonData = pm.response.json();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.errors).to.be.an(\"array\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Sam\",\n    \"lastName\": \"Smith\",\n    \"emailAddress\": \"sam.com\",\n    \"password\": \"password\"\n}"
				},
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users (No Auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 401 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"// Should return an 'access denied' error",
							"const jsonData = pm.response.json();",
							"const message = jsonData.message.toLowerCase();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(message).to.equal(\"access denied\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Course (No Auth, Incomplete Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 401 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"// Should return an 'access denied' error",
							"const jsonData = pm.response.json();",
							"const message = jsonData.message.toLowerCase();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(message).to.equal(\"access denied\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "localhost:5000/api/courses",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Course (No Auth, Incomplete Data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 401 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"// Should return an 'access denied' error",
							"const jsonData = pm.response.json();",
							"const message = jsonData.message.toLowerCase();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(message).to.equal(\"access denied\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "localhost:5000/api/courses/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Course (No Auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Should return a 401 status",
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"// Should return an 'access denied' error",
							"const jsonData = pm.response.json();",
							"const message = jsonData.message.toLowerCase();",
							"pm.test(\"Test data in the response\", () => {",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(message).to.equal(\"access denied\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "localhost:5000/api/courses/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"courses",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}